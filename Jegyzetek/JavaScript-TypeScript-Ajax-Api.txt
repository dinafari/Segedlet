# JavaScript és TypeScript Jegyzet

## JavaScript Alapok

### Mi az a JavaScript?
A **JavaScript** egy magas szintű, dinamikusan típusos, objektumalapú programozási nyelv, amelyet főként weboldalak interaktív funkcióinak megvalósítására használnak. Böngészőkben fut, de a Node.js segítségével a szerveroldalon is alkalmazható.

### JavaScript Főbb Jellemzői
- **Interaktív funkciók**: Dinamikus tartalom, űrlapellenőrzés, animációk.
- **Platformfüggetlen**: Bármely modern böngésző támogatja.
- **Objektumalapú**: Minden érték egy objektum vagy objektumhoz hasonló adattípus.

## TypeScript Alapok

### Mi az a TypeScript?
A **TypeScript** egy JavaScript-re épülő, statikusan típusos programozási nyelv, amelyet a Microsoft fejlesztett. A TypeScript kódot JavaScript-re fordítják, így bármely olyan környezetben használható, amely támogatja a JavaScriptet.

### TypeScript Főbb Jellemzői
- **Statikus típusellenőrzés**: A típusokat már futás előtt, fordítási időben ellenőrzi.
- **Modern JavaScript funkciók**: Támogatja az ES6+ szintaxisát.
- **Jobb fejlesztői élmény**: Kódfelismerés, automatikus kiegészítés, hibakeresés.

### TypeScript vs JavaScript
| Tulajdonság         | JavaScript                 | TypeScript                 |
|--------------------|----------------------------|----------------------------|
| Típusellenőrzés    | Futásidőben                | Fordítási időben          |
| Kód futtatása      | Közvetlenül böngészőben    | Fordítás után JS-ként     |
| Hibakezelés        | Futás közben derül ki      | Már fordításkor figyelmeztet |

### TypeScript Szintaxis

#### Változók Típusos Deklarálása
```typescript
let szam: number = 42;
const nev: string = "Anna";
let igaz: boolean = true;
```

#### Típusok
- `number`: Egész és lebegőpontos számok
- `string`: Karakterlánc
- `boolean`: Igaz/hamis
- `array`: Tömbök
- `any`: Bármilyen típus (nem ajánlott gyakori használatra)
- `void`: Nincs visszatérési érték

#### Függvények TypeScriptben
```typescript
function osszead(a: number, b: number): number {
    return a + b;
}

const eredmeny = osszead(5, 10);
console.log(eredmeny); // 15
```

#### Interfészek
```typescript
interface Szemely {
    nev: string;
    kor: number;
}

const szemely: Szemely = {
    nev: "Anna",
    kor: 30
};

console.log(szemely.nev); // Anna
```

#### Osztályok
```typescript
class Auto {
    marka: string;

    constructor(marka: string) {
        this.marka = marka;
    }

    indit(): void {
        console.log(`${this.marka} elindult.`);
    }
}

const audi = new Auto("Audi");
audi.indit(); // Audi elindult.
```

## AJAX – Asynchronous JavaScript and XML

### Mi az az AJAX?
Az **AJAX** egy olyan technika, amely lehetővé teszi, hogy a weboldalak aszinkron módon kommunikáljanak a szerverrel anélkül, hogy az egész oldal újratöltődne. Bár az elnevezés az XML-re utal, ma már gyakran JSON-t használunk adatátvitelre.

### AJAX Főbb Jellemzői
- **Aszinkron kommunikáció**: Az oldal frissítése nélkül kérhetünk és küldhetünk adatokat.
- **Felhasználói élmény javítása**: Gyorsabb és dinamikusabb weboldalak létrehozása.

### AJAX Működése
1. Kliens (böngésző) kérést küld a szervernek.
2. A szerver feldolgozza a kérést és választ küld vissza.
3. A válasz feldolgozása és a DOM frissítése történik.

### XMLHttpRequest használata
```javascript
const xhr = new XMLHttpRequest();
xhr.open("GET", "https://jsonplaceholder.typicode.com/posts", true);

xhr.onload = function() {
    if (xhr.status === 200) {
        console.log(JSON.parse(xhr.responseText));
    }
};

xhr.send();
```

### Fetch API használata
A `fetch()` modern alternatívája az `XMLHttpRequest` objektumnak, egyszerűbb és olvashatóbb szintaxissal.

```javascript
fetch("https://jsonplaceholder.typicode.com/posts")
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error("Hiba történt:", error));
```

### Aszinkron/Await használata
A `async` és `await` kulcsszavak egyszerűbbé és érthetőbbé teszik az aszinkron műveletek kezelését.

```javascript
async function fetchData() {
    try {
        const response = await fetch("https://jsonplaceholder.typicode.com/posts");
        const data = await response.json();
        console.log(data);
    } catch (error) {
        console.error("Hiba történt:", error);
    }
}

fetchData();
```

## Összegzés
A **JavaScript** és a **TypeScript** egyaránt fontos szerepet játszanak a modern webfejlesztésben. 
A JavaScript dinamikus és rugalmas, míg a TypeScript típusbiztonságot nyújt, amely segíti 
a nagyobb projektek átláthatóságát és hibamentességét. Az **AJAX** technika pedig lehetővé teszi 
az aszinkron adatkommunikációt, amely gyorsabbá és interaktívabbá teszi a weboldalakat.

